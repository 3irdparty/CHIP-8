;; Lunar lander clone for the CHIP-8
;;
;; Coded by Jeffrey Massung as an example of the
;; CHIP-8 assembler.
;;
;; Have fun!
;;

;; Where is the lander?
;;
x               var         v4
y               var         v5

;; Current thrust vector (y) and tilt (x). These are #80
;; when not moving. When they drop to #40 then the lander
;; X/Y will decrease by 1. When they reach #C0 then the
;; lander X/Y will increase by 1. Then the the thrust/tilt
;; will reset back to #80.
;;
thrust          var         v6
tilt            var         v7

;; Thrust vectors (X and Y). Each loop iteration these will
;; be applied to the thrust/tilt of the lander.
;;
vx              var         v8     ; affects tilt
vy              var         v9     ; affects thrust

;; How much fuel is in use and is left.
;;
fuel_use        var         va
fuel            var         vb

;; Where is the target platform along the ground.
;;
plat_x          var         vc

;; Key mapping.
;;
up              equ         5     ; w
left            equ         7     ; a
right           equ         9     ; d

;; Rate at which gravity is applied.
;;
g               equ         15

;; Whether or not thrust is visible is stored in R0. This
;; is toggled every time the thrust is drawn so it can be
;; checked and the thrust can be hidden if desired.


;; Initial setup for the game.
;;
start           high


;; Initial setup for every level.
;;
init            cls

                ; Initialize all major pieces.
                call        init_ground
                call        init_platform
                call        init_lander
                call        fill_tank

                ; Main game loop.
loop            call        gravity
                call        move
                call        input

                ; Do it all over again...
                jp          loop


;; Initialize the lander, pick a random position
;;
init_lander     rnd         x, #7f

                ; Reset the thrust flag.
                ld          v0, 0
                ld          r, v0

                ; Make sure it doesn't overlap the fuel.
                ld          v0, 111
                subn        v0, x
                se          vf, 0
                jp          init_lander

                ; Setup the y position and initial thrust.
                ld          y, 0

                ; Clear the direction of travel.
                ld          vx, 0
                ld          vy, 0

                ; Reset the thrust/tilt vectors.
                ld          thrust, #80
                ld          tilt, #80

                ; When fuel_use rolls over, fuel is expended.
                ld          fuel_use, 0
                ld          fuel, 64

                ; Setup the initial delay and start falling.
                ld          v0, g
                ld          dt, v0

                ; Display it.
                call        draw_lander
                ret


;; Initialize the ground and pick a random platform.
;;
init_ground     ld          v7, 64
                rnd         v0, 7
                add         v0, 8
                sub         v7, v0

                ; X coordinate offset.
                ld          v8, 0

                ; There are 2, 7-wide features.
                call        pick_feature
                call        pick_feature
                call        pick_feature
                ret

                ; Pick a random feature.
pick_feature    rnd         v0, 7
                shl         v0
                shl         v0
                shl         v0

                ; Load the feature data (5 bytes long).
                ld          i, features
                add         i, v0
                ld          v4, [i]

                ; Add the current elevation to each delta.
                add         v0, v7
                add         v1, v7
                add         v2, v7
                add         v3, v7
                add         v4, v7

                ; Write the elevations to memory.
                ld          i, elevation
                add         i, v8
                ld          [i], v4

                ; Update the current elevation.
                ld          v7, v2

                ; Draw each elevation.
                call        draw_elevation
                ld          v0, v1
                call        draw_elevation
                ld          v0, v2
                call        draw_elevation
                ld          v0, v3
                call        draw_elevation
                ld          v0, v4
                call        draw_elevation
                ret

                ; Calculate the actual elevation (64-v3)
draw_elevation  ld          i, ground

                ; v9=v8*8 (x coordinate)
                ld          v9, v8
                shl         v9
                shl         v9
                shl         v9

                ; Advance the terrain X.
                add         v8, 1

                ; va=v0 (y coordinate)
                ld          va, v0

                ; Draw the ground sprite.
draw_ground     drw         v9, va, 14
                add         va, 14
                ld          vb, 64
                sub         vb, va
                se          vf, 0           ; va >= 64
                jp          draw_ground
                ret


;; Pick a random place for the landing platform. This will always be
;; on an 8-bit boundary that matches up with an elevation.
;;
init_platform   rnd         v1, 15
                sne         v1, 15
                jp          init_platform

                ; Load the elevation at that point.
                ld          i, elevation
                add         i, v1
                ld          v0, [i]

                ; If too low (>= 64) then try again.
                ld          v2, #c0
                ld          v3, v0
                and         v3, v2
                se          v3, 0
                jp          init_platform

                ; Set the platform X position (v1 * 3)
                ld          plat_x, v1
                shl         plat_x
                shl         plat_x
                shl         plat_x

                ; Draw the platform at the proper elevation.
                ld          i, platform
                drw         plat_x, v0, 3
                ret


;; Called every iteration. Checks if the delay has expired and
;; then applies gravity to the VY vector.
;;
gravity         ld          v0, dt
                se          v0, 0
                jp          apply_vy

                ; Increase the downward velocity of the lander.
                add         vy, 1

                ; Reset the delay timer.
                ld          v0, g
                ld          dt, v0

                ; If the thrust is visible, hide it.
                ld          v0, r
                se          v0, 0
                call        draw_thrust

                ; Apply VY to the thrust vector.
apply_vy        add         thrust, vy

                ; Should the lander fall to the ground?
                ld          v0, #c0
                sub         v0, thrust
                sne         vf, 0
                jp          drop_lander

                ; Should the lander climb higher?
                ld          v0, #40
                sub         v0, thrust
                sne         vf, 0
                ret

                ; Launch the lander higher.
                call        hide_lander
                add         y, -1
                call        draw_lander

                ; Reset the thrust vector.
                ld          thrust, #80
                add         thrust, v0
                ret

                ; The lander should fall a bit.
drop_lander     call        hide_lander
                add         y, 1
                call        draw_lander

                ; Did the lander hit the ground?
                se          vf, 0
                jp          land

                ; Reset the thrust vector.
                ld          thrust, #80
                ret

                ; The lander collided with the ground.
land            call        hide_lander
                add         y, -1
                call        draw_lander

                ; get more points
                call        fuel_bonus

                ; reset and start the next level
                jp          init


;; Called every iteration, Applies VX to the tilt vector and
;; determines if the lander should move left or right.
;;
move            add         tilt, vx

                ; Should the lander list to the left?
                ld          v0, #40
                subn        v0, tilt
                se          vf, 0
                jp          tilt_right

                ; Move and redraw the lander.
                call        hide_lander
                add         x, -1
                call        draw_lander

                ; Reset the tilt vector.
                ld          tilt, #80
                ret

                ; Should the lander list to the right?
tilt_right      ld          v0, #c0
                sub         v0, tilt
                se          vf, 0
                ret

                ; Move and redraw the lander.
                call        hide_lander
                add         x, 1
                call        draw_lander

                ; Reset the tilt vector.
                ld          tilt, #80
                ret


;; Called once per iteration to process controls.
;;
input           ld          v0, up
                sknp        v0
                call        thrust_up
                ld          v0, left
                sknp        v0
                call        thrust_left
                ld          v0, right
                sknp        v0
                jp          thrust_right
                ret

                ; Expend a good amount of fuel.
thrust_up       ld          v0, #C0
                call        spend_fuel

                ; Does the player have fuel left?
                se          vf, 1
                ret

                ; Add to the VY vector.
                add         vy, -2

                ; Show the thrust.
                jp          draw_thrust

                ; Spend some fuel to thrust sideways.
thrust_left     ld          v0, #60
                call        spend_fuel

                ; Is there any fuel left?
                se          vf, 1
                ret

                ; Update the tilt vector.
                add         vx, -2
                ret

                ; Spend some fuel to thrust sideways.
thrust_right    ld          v0, #60
                call        spend_fuel

                ; Is there any fuel left?
                se          vf, 1
                ret

                ; Update the tilt vector.
                add         vx, 2
                ret


;; Called when thrusting to use some more fuel. V0 should
;; contain the amount of fuel to use. VF will be 0 if there
;; is no more fuel to spend.
;;
spend_fuel      ld          vf, 0
                sne         fuel, 64
                ret

                ; Spend the fuel request in V0.
                sub         fuel_use, v0
                se          vf, 0
                ret

                ; A bar of fuel has been spent.
                ld          i, fuel_bar
                ld          v0, 120
                drw         v0, fuel, 1
                add         fuel, 1
                ld          vf, 1
                ret


;; Call to erase or redraw the lander sprite.
;;
hide_lander     ld          v0, r
                se          v0, 0
                call        draw_thrust
draw_lander     ld          i, lander
                drw         x, y, 5
                ret
draw_thrust     ld          i, lander_thrust
                ld          v0, y
                add         v0, 5
                drw         x, v0, 3

                ; Toggle whether or not the thrust is visible.
                ld          v0, r
                ld          v1, 1
                xor         v0, v1
                ld          r, v0
                ret


;; Add some points to the score.
;;
add_score       ld          i, score
                ld          v1, [i]
                add         v0, 1

                ; Another hundred points to add?
                sne         v0, 100
                jp          write_score
                ld          v0, 0
                add         v1, 1

                ; Save the score back to memory.
write_score     ld          [i], v1
                ret


;; Player completely ran out of points. Game over.
game_over       ld          i, game_over_text
                ld          v2, 5
                ld          v0, 0
                ld          v1, 0

                ; G
                drw         v0, v1, 5
                add         v0, 5
                add         i, v2

                ; A
                drw         v0, v1, 5
                add         v0, 5
                add         i, v2

                ; M
                drw         v0, v1, 5
                add         v0, 5
                add         i, v2

                ; E
                drw         v0, v1, 5
                add         v0, 7
                add         i, v2

                ; O
                drw         v0, v1, 5
                add         v0, 5
                add         i, v2

                ; V
                drw         v0, v1, 5
                add         v0, 5
                add         i, v2

                ; E
                drw         v0, v1, 5
                add         v0, 5
                add         i, v2

                ; R
                drw         v0, v1, 5
                exit


;; Keep adding fuel back until it is full.
;;
fill_tank       ld          i, fuel_text
                ld          v0, 120
                ld          v1, 0

                ; Draw the "fuel" sprite.
                drw         v0, v1, 12
                add         v1, 12
                add         i, v1
                drw         v0, v1, 11

                ; Fill up the fuel bar.
                ld          i, fuel_bar
add_fuel        add         fuel, -1
                drw         v0, fuel, 1

                ; Stop when full.
                se          fuel, 0
                jp          add_fuel
                ret


;; Take the rest of the fuel and add it to the score.
;;
fuel_bonus      ld          i, fuel_bar
                ld          v0, 120
                drw         v0, fuel, 1
                add         fuel, 1

                ; add a point and redraw the score
                call        add_score

                ; Stop when empty.
                se          fuel, 64
                jp          fuel_bonus
                ret



;; Scratch memory for all kinds of things (like BCD)...
;;
scratch         pad         16


;; The score is stored here in memory.
;;
score           pad         2


;; Contains the height of the ground every 8 pixels.
;;
elevation       pad         15


;; This is the FUEL gauge text. It's a tall, vertical sprite.
;;
fuel_text       byte        %....111.
                byte        %....1...
                byte        %....11..
                byte        %....1...
                byte        %....1...
                byte        %........
                byte        %....1.1.
                byte        %....1.1.
                byte        %....1.1.
                byte        %....1.1.
                byte        %....111.
                byte        %........
                byte        %....111.
                byte        %....1...
                byte        %....111.
                byte        %....1...
                byte        %....111.
                byte        %........
                byte        %....1...
                byte        %....1...
                byte        %....1...
                byte        %....1...
                byte        %....111.


;; Displayed when game is over.
;;
game_over_text  byte        %.11.....
                byte        %1.......
                byte        %1.1.....
                byte        %1.1.....
                byte        %.11.....

                byte        %.1......
                byte        %1.1.....
                byte        %111.....
                byte        %1.1.....
                byte        %1.1.....

                byte        %1.1.....
                byte        %111.....
                byte        %111.....
                byte        %1.1.....
                byte        %1.1.....

                byte        %111.....
                byte        %1.......
                byte        %11......
                byte        %1.......
                byte        %111.....

                byte        %.1......
                byte        %1.1.....
                byte        %1.1.....
                byte        %1.1.....
                byte        %.1......

                byte        %1.1.....
                byte        %1.1.....
                byte        %1.1.....
                byte        %1.1.....
                byte        %.1......

                byte        %111.....
                byte        %1.......
                byte        %11......
                byte        %1.......
                byte        %111.....

                byte        %11......
                byte        %1.1.....
                byte        %11......
                byte        %1.1.....
                byte        %1.1.....


;; A single line of the fuel gauge used.
;;
fuel_bar        byte        %...11111

;; Ground bitmap. The Platform bitmap is offset by a byte so that when
;; the two overlap the platform will be solid.
;;
ground          byte        %1.1.1.1.
platform        byte        %.1.1.1.1
                byte        %1.1.1.1.
                byte        %.1.1.1.1
                byte        %1.1.1.1.
                byte        %.1.1.1.1
                byte        %1.1.1.1.
                byte        %.1.1.1.1
                byte        %1.1.1.1.
                byte        %.1.1.1.1
                byte        %1.1.1.1.
                byte        %.1.1.1.1
                byte        %1.1.1.1.
                byte        %.1.1.1.1

;; Lander sprite.
;;
lander          byte        %.111....
                byte        %11111...
                byte        %11111...
                byte        %.1.1....
                byte        %11.11...
lander_thrust   byte        %.1.1....
                byte        %..1.....
                byte        %..1.....

;; All the terrain features possible. The ground begins at a random
;; elevation but then picks 3 features (that are 5 bits wide each) to
;; put next to each other. Each feature stored as 8 bytes long so
;; they can be shifted to easily.
;;
features        byte        0,  0,  0,  0,  0,    0, 0, 0   ; flat
                byte        0,  2,  6,  2,  0,    0, 0, 0   ; peak
                byte        0, -2, -6, -2,  0,    0, 0, 0   ; valley
                byte        4,  8,  8,  4,  0,    0, 0, 0   ; high peak
                byte       -4, -8, -8, -4, -0,    0, 0, 0   ; low valley
                byte        0,  0,  2,  2,  2,    0, 0, 0   ; ramp up
                byte        2, -2,  2, -2,  0,    0, 0, 0   ; rough 1
                byte       -2,  4, -2,  4,  0,    0, 0, 0   ; rough 2
