; This is a simple version of the game Snake for the CHIP-8.
;
; Coded by Jeffrey Massung as an example of the
; CHIP-8 assembler.
;
; Have fun!
;

; Let's define how we're going to use our registers...
;
; v0-v3  = scratch
; v4     = head x
; v5     = head y
; v6     = score
; v7     = direction (0=up, 1=right, 2=down, 3=left)
; v8     = food x
; v9     = food y
; va     = snake head offset
; vb     = snake tail offset
;

; Since our snake can get pretty long, we need to define a
; place in memory to store it. That will be done at the end
; of the program (see .snake_tail). Each piece of the snake
; will be 2-bytes: x and y. The head will be written to VA
; (pre-incremented), while the tail will be read from VB
; (post-incremented).
;

    ; The snake has an initial length of 2 (4=x,y,x,y). Read
    ; comment at end of the program to understand why 8 and
    ; 4 are used here.
    ;
    ld          va, 8
    ld          vb, 4

    ; No initial score. Movement to the right.
    ld          v6, 0
    ld          v7, 1

    ; Load the initial snake tail and head into memory.
    ld          i, snake_tail
    add         i, vb
    ld          v5, [i]

    ; Draw the initial snake.
    ld          i, start_position
    drw         v0, v1, 1

    ; Draw the initial score and spawn food.
    call        draw_score
    call        spawn_food

.loop
    call        user_input
    call        move
    call        check_bounds
    call        write_head
    call        draw_head
    call        erase_tail

    ; Loop forever until the game is done.
    jp          loop

.user_input

    ; Is the UP key (W) pressed?
    ld          v0, 5
    sknp        v0
    ld          v7, 0

    ; Is the LEFT key (A) pressed?
    ld          v0, 7
    sknp        v0
    ld          v7, 3

    ; Is the DOWN key (S) pressed?
    ld          v0, 8
    sknp        v0
    ld          v7, 2

    ; Is the RIGHT key (D) pressed?
    ld          v0, 9
    sknp        v0
    ld          v7, 1
    ret

.move

    ; Test against direction (like a switch statement).
    sne         v7, 0
    jp          move_up
    sne         v7, 1
    jp          move_right
    sne         v7, 2
    jp          move_down
    sne         v7, 3
    jp          move_left

    ; Should never get here, let's break just in case.
    break       Invalid movement direction!
    exit

.move_up
    add         v5, #ff ; -1
    ret
.move_right
    add         v4, 1
    ret
.move_down
    add         v5, 1
    ret
.move_left
    add         v4, #ff ; -1
    ret

.write_head

    ; Offset to the head address to write to.
    ld          i, snake_tail

    ; Pre-increment the head position.
    add         va, 2
    add         i, va

    ; Write the head X,Y to [I].
    ld          v0, v4
    ld          v1, v5
    ld          [i], v1
    ret

.erase_tail

    ; Offset to the tail address to read from.
    ld          i, snake_tail
    add         i, vb

    ; Load the tail position into V0,V1.
    ld          v1, [i]

    ; Erase the dot that's already there.
    ld          i, dot
    drw         v0, v1, 1

    ; Post-increment the tail address offset.
    add         vb, 2
    ret

.draw_head

    ; Draw the new head position.
    ld          i, dot
    drw         v4, v5, 1

    ; If the head didn't collide with anything, return.
    se          vf, 1
    ret

    ; Check to see if the head hit the food. If not, game over.
    se          v4, v8
    jp          game_over
    se          v5, v9
    jp          game_over

    ; Play a little beep for eating food.
    ld          v0, 2
    ld          st, v0

    ; Erase, increment, and redraw the score.
    call        draw_score
    add         v6, 1
    call        draw_score

    ; Grow the snake by 2. This is done by growing the tail. We
    ; don't want to erase anything on the screen, so pre-decrement
    ; the tail offset and then write 2 dummy positions. This way
    ; two new head positions will be written before the tail
    ; catches up.

    ; Pre-decrement tail by 2 positions.
    add         vb, #fc ; -4

    ; Offset to the tail in memory.
    ld          i, snake_tail
    add         i, vb

    ; Write -1,-1,-1,-1 to memory.
    ld          v0, #ff
    ld          v1, #ff
    ld          v2, #ff
    ld          v3, #ff
    ld          [i], v3

    ; Now redraw the head (since it was turned off).
    ld          i, dot
    drw         v4, v5, 1

    ; Tail call to spawn another food pellet.
    jp          spawn_food

.check_bounds

    ; Is X == -1 or X == 64?
    sne         v4, #ff
    jp          game_over
    sne         v4, 64
    jp          game_over

    ; Is Y == -1 or Y == 32?
    sne         v5, #ff
    jp          game_over
    sne         v5, 32
    jp          game_over

    ; Keep playing.
    ret

.spawn_food

    ; Pick a random position to spawn food at.
    rnd         v8, #3f
    rnd         v9, #1f

    ; If Y > 7 then we can draw food.
    ld          v0, 7
    subn        v0, v9
    se          vf, 0
    jp          draw_food

    ; If X < 54 then we can draw food.
    ld          v0, 54
    subn        v0, v8
    se          vf, 1
    jp          draw_food

    ; Overlapping the score area, try again.
    jp          spawn_food

.draw_food

    ; Draw it there.
    ld          i, dot
    drw         v8, v9, 1

    ; If nothing was already there, we're okay.
    sne         vf, 0
    ret

    ; Otherwise, put it back and try again.
    drw         v8, v9, 1
    jp          spawn_food

.draw_score

    ; Where the score (in BCD) will be stored.
    ld          i, score

    ; Write the score as BCD, load it into v0..v2.
    ld          b, v6
    ld          v2, [i]

    ; Where to draw the score...
    ld          v0, 55
    ld          v3, 0

    ; Draw the tens digit (stored in v1).
    ld          f, v1
    drw         v0, v3, 5
    add         v0, 5

    ; Draw the ones digit (stored in v2).
    ld          f, v2
    drw         v0, v3, 5
    ret

.game_over

    ; Play a long, buzz sound.
    ld          v0, 15
    ld          st, v0

    ; Stop the program.
    exit

.start_position

    ; The initial snake is 3 pixels long.
    byte        $111.....

.dot

    ; The snake and food are all a single dot.
    byte        $1.......

.score

    ; Memory reserved for the BCD score value.
    reserve     3

.snake_tail

    ; This is where the snake is stored in memory. These
    ; 6 bytes are the initial tail positions of the snake.
    ;
    ; The 4 padding is there just in case the first food
    ; pellet just happens to be next to the snake's head.
    ;
    byte        0, 0, 0, 0, 10, 10, 11, 10, 12, 10